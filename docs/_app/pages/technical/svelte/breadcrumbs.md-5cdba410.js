import{S as $s,i as As,s as Is,r as l,x as o,a as i,u as r,v as c,y as p,n as s,d as u,w as D,f as e,I as t,C as ss}from"../../../chunks/index-077af1fa.js";function Ls(Ts){let m,ya,b,wa,_a,X,Y,Z,E,Ea,g,O,Oa,aa,k,M,Sa,Ha,R,Pa,qa,U,xa,Ta,sa,S,Ca,ta,H,Wa,na,P,Ba,ea,f,Ka,j,$a,Aa,F,Ia,La,oa,q,Da,pa,d,Ma,N,Ra,Ua,la,v,Cs=`<code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">export</span> <span class="token keyword">let</span> path<span class="token punctuation">;</span>

    <span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Remove zero-length tokens.</span>
        <span class="token keyword">const</span> tokens <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=></span> t <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Create &#123; label, href &#125; pairs for each token.</span>
        <span class="token keyword">let</span> tokenPath <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
        crumbs <span class="token operator">=</span> tokens<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            tokenPath <span class="token operator">+=</span> <span class="token string">'/'</span> <span class="token operator">+</span> t<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
                <span class="token literal-property property">label</span><span class="token operator">:</span> t<span class="token punctuation">,</span>
                <span class="token literal-property property">href</span><span class="token operator">:</span> tokenPath<span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Add a way to get home too.</span>
        crumbs<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span> <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">'/'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

<span class="token punctuation">&#123;</span>#each crumbs <span class="token keyword">as</span> c<span class="token punctuation">,</span> i<span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> i <span class="token operator">==</span> crumbs<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span>label<span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span>href<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span>label<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>
    <span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token operator">/</span>each<span class="token punctuation">&#125;</span></code>`,ra,x,z,ja,ca,h,Fa,Q,Na,za,G,Qa,Ga,ia,y,Ws=`<code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> Breadcrumb <span class="token keyword">from</span> <span class="token string">'$lib/components/Breadcrumb.svelte'</span><span class="token punctuation">;</span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> page <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'$app/stores'</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

<span class="token operator">&lt;</span>Breadcrumb path<span class="token operator">=</span><span class="token punctuation">&#123;</span>$page<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span></code>`,ua,T,Ja,ka,C,Va,ma,W,Xa,fa,B,Ya,ha,K,J,Za,da,$,ga,ba,A,V,w,as;return{c(){m=l("p"),ya=o(`A quick and dirty way to add breadcrumbs to your
`),b=l("a"),wa=o("SvelteKit"),_a=o(" application."),X=i(),Y=l("hr"),Z=i(),E=l("h2"),Ea=o("What are breadcrumbs?"),g=i(),O=l("p"),Oa=o(`Breadcrumbs provide a visual indicator to a user where they are located in the
hierarchy of pages of a website. They also provide a quick way to navigate the
path back to the root of the hierarchy by adding links:`),aa=i(),k=l("blockquote"),M=l("u"),Sa=o("Home"),Ha=o(" > "),R=l("u"),Pa=o("Technical"),qa=o(" > "),U=l("u"),xa=o("Svelte"),Ta=o(" > Breadcrumbs"),sa=i(),S=l("h2"),Ca=o("Our goal?"),ta=i(),H=l("p"),Wa=o(`We want to build a simple breadcrumb component. We do not want to manually
include the component on each page, nor manage it\u2019s contents. The component
must update every time the user moves to a different page.`),na=i(),P=l("h2"),Ba=o("Method"),ea=i(),f=l("p"),Ka=o("SvelteKit uses a filesystem-based router. Files named "),j=l("code"),$a=o("__layout.svelte"),Aa=o(`
determine the layout for the current page and pages below itself in the file
hierarchy. We can use use SvelteKit\u2019s store `),F=l("code"),Ia=o("page"),La=o(` to determine what the current
path is, and pass that location to a breadcrumb component which we add to the
layout.`),oa=i(),q=l("h3"),Da=o("The breadcrumb component"),pa=i(),d=l("p"),Ma=o(`Our breadcrumb component is a normal Svelte component, accepting the current
path as a prop, and displays some variation of it as a breadcrumb (say
`),N=l("code"),Ra=o("$lib/components/breadcrumb.svelte"),Ua=o("):"),la=i(),v=l("pre"),ra=i(),x=l("h3"),z=l("code"),ja=o("__layout.svelte"),ca=i(),h=l("p"),Fa=o("In "),Q=l("code"),Na=o("src/routes/__layout.svelte"),za=o(", we pull out the page from "),G=l("code"),Qa=o("$app/stores"),Ga=o(`, and
pass the path store to the breadcrumb component as a prop:`),ia=i(),y=l("pre"),ua=i(),T=l("p"),Ja=o("An implementation can be seen on this website, at the top of the page."),ka=i(),C=l("h2"),Va=o("Summary"),ma=i(),W=l("p"),Xa=o(`We created a breadcrumb component that is simple, requires no manual
intervention for either it\u2019s inclusion or management, and is fully
reactive. New pages can be added to the application with no regard to
the breadcrumb, and it will act accordingly.`),fa=i(),B=l("h3"),Ya=o("Improvements"),ha=i(),K=l("ul"),J=l("li"),Za=o(`Our example solution above only shows elements from the path. Real
applications may want to change these to use language more contextually
correct. One way would be to map each path token to a dictionary; this
would require maintaining the dictionary every time a new page is added.`),da=i(),$=l("h2"),ga=o("More information"),ba=i(),A=l("ul"),V=l("li"),w=l("a"),as=o("SvelteKit"),this.h()},l(a){m=r(a,"P",{});var n=c(m);ya=p(n,`A quick and dirty way to add breadcrumbs to your
`),b=r(n,"A",{href:!0,rel:!0});var ts=c(b);wa=p(ts,"SvelteKit"),ts.forEach(s),_a=p(n," application."),n.forEach(s),X=u(a),Y=r(a,"HR",{}),Z=u(a),E=r(a,"H2",{});var ns=c(E);Ea=p(ns,"What are breadcrumbs?"),ns.forEach(s),g=u(a),O=r(a,"P",{});var es=c(O);Oa=p(es,`Breadcrumbs provide a visual indicator to a user where they are located in the
hierarchy of pages of a website. They also provide a quick way to navigate the
path back to the root of the hierarchy by adding links:`),es.forEach(s),aa=u(a),k=r(a,"BLOCKQUOTE",{});var _=c(k);M=r(_,"U",{});var os=c(M);Sa=p(os,"Home"),os.forEach(s),Ha=p(_," > "),R=r(_,"U",{});var ps=c(R);Pa=p(ps,"Technical"),ps.forEach(s),qa=p(_," > "),U=r(_,"U",{});var ls=c(U);xa=p(ls,"Svelte"),ls.forEach(s),Ta=p(_," > Breadcrumbs"),_.forEach(s),sa=u(a),S=r(a,"H2",{});var rs=c(S);Ca=p(rs,"Our goal?"),rs.forEach(s),ta=u(a),H=r(a,"P",{});var cs=c(H);Wa=p(cs,`We want to build a simple breadcrumb component. We do not want to manually
include the component on each page, nor manage it\u2019s contents. The component
must update every time the user moves to a different page.`),cs.forEach(s),na=u(a),P=r(a,"H2",{});var is=c(P);Ba=p(is,"Method"),is.forEach(s),ea=u(a),f=r(a,"P",{});var I=c(f);Ka=p(I,"SvelteKit uses a filesystem-based router. Files named "),j=r(I,"CODE",{});var us=c(j);$a=p(us,"__layout.svelte"),us.forEach(s),Aa=p(I,`
determine the layout for the current page and pages below itself in the file
hierarchy. We can use use SvelteKit\u2019s store `),F=r(I,"CODE",{});var ks=c(F);Ia=p(ks,"page"),ks.forEach(s),La=p(I,` to determine what the current
path is, and pass that location to a breadcrumb component which we add to the
layout.`),I.forEach(s),oa=u(a),q=r(a,"H3",{});var ms=c(q);Da=p(ms,"The breadcrumb component"),ms.forEach(s),pa=u(a),d=r(a,"P",{});var va=c(d);Ma=p(va,`Our breadcrumb component is a normal Svelte component, accepting the current
path as a prop, and displays some variation of it as a breadcrumb (say
`),N=r(va,"CODE",{});var fs=c(N);Ra=p(fs,"$lib/components/breadcrumb.svelte"),fs.forEach(s),Ua=p(va,"):"),va.forEach(s),la=u(a),v=r(a,"PRE",{class:!0});var Bs=c(v);Bs.forEach(s),ra=u(a),x=r(a,"H3",{});var hs=c(x);z=r(hs,"CODE",{});var ds=c(z);ja=p(ds,"__layout.svelte"),ds.forEach(s),hs.forEach(s),ca=u(a),h=r(a,"P",{});var L=c(h);Fa=p(L,"In "),Q=r(L,"CODE",{});var bs=c(Q);Na=p(bs,"src/routes/__layout.svelte"),bs.forEach(s),za=p(L,", we pull out the page from "),G=r(L,"CODE",{});var vs=c(G);Qa=p(vs,"$app/stores"),vs.forEach(s),Ga=p(L,`, and
pass the path store to the breadcrumb component as a prop:`),L.forEach(s),ia=u(a),y=r(a,"PRE",{class:!0});var Ks=c(y);Ks.forEach(s),ua=u(a),T=r(a,"P",{});var ys=c(T);Ja=p(ys,"An implementation can be seen on this website, at the top of the page."),ys.forEach(s),ka=u(a),C=r(a,"H2",{});var ws=c(C);Va=p(ws,"Summary"),ws.forEach(s),ma=u(a),W=r(a,"P",{});var _s=c(W);Xa=p(_s,`We created a breadcrumb component that is simple, requires no manual
intervention for either it\u2019s inclusion or management, and is fully
reactive. New pages can be added to the application with no regard to
the breadcrumb, and it will act accordingly.`),_s.forEach(s),fa=u(a),B=r(a,"H3",{});var Es=c(B);Ya=p(Es,"Improvements"),Es.forEach(s),ha=u(a),K=r(a,"UL",{});var Os=c(K);J=r(Os,"LI",{});var Ss=c(J);Za=p(Ss,`Our example solution above only shows elements from the path. Real
applications may want to change these to use language more contextually
correct. One way would be to map each path token to a dictionary; this
would require maintaining the dictionary every time a new page is added.`),Ss.forEach(s),Os.forEach(s),da=u(a),$=r(a,"H2",{});var Hs=c($);ga=p(Hs,"More information"),Hs.forEach(s),ba=u(a),A=r(a,"UL",{});var Ps=c(A);V=r(Ps,"LI",{});var qs=c(V);w=r(qs,"A",{href:!0,rel:!0});var xs=c(w);as=p(xs,"SvelteKit"),xs.forEach(s),qs.forEach(s),Ps.forEach(s),this.h()},h(){D(b,"href","https://kit.svelte.dev"),D(b,"rel","nofollow"),D(v,"class","language-js"),D(y,"class","language-js"),D(w,"href","https://kit.svelte.dev"),D(w,"rel","nofollow")},m(a,n){e(a,m,n),t(m,ya),t(m,b),t(b,wa),t(m,_a),e(a,X,n),e(a,Y,n),e(a,Z,n),e(a,E,n),t(E,Ea),e(a,g,n),e(a,O,n),t(O,Oa),e(a,aa,n),e(a,k,n),t(k,M),t(M,Sa),t(k,Ha),t(k,R),t(R,Pa),t(k,qa),t(k,U),t(U,xa),t(k,Ta),e(a,sa,n),e(a,S,n),t(S,Ca),e(a,ta,n),e(a,H,n),t(H,Wa),e(a,na,n),e(a,P,n),t(P,Ba),e(a,ea,n),e(a,f,n),t(f,Ka),t(f,j),t(j,$a),t(f,Aa),t(f,F),t(F,Ia),t(f,La),e(a,oa,n),e(a,q,n),t(q,Da),e(a,pa,n),e(a,d,n),t(d,Ma),t(d,N),t(N,Ra),t(d,Ua),e(a,la,n),e(a,v,n),v.innerHTML=Cs,e(a,ra,n),e(a,x,n),t(x,z),t(z,ja),e(a,ca,n),e(a,h,n),t(h,Fa),t(h,Q),t(Q,Na),t(h,za),t(h,G),t(G,Qa),t(h,Ga),e(a,ia,n),e(a,y,n),y.innerHTML=Ws,e(a,ua,n),e(a,T,n),t(T,Ja),e(a,ka,n),e(a,C,n),t(C,Va),e(a,ma,n),e(a,W,n),t(W,Xa),e(a,fa,n),e(a,B,n),t(B,Ya),e(a,ha,n),e(a,K,n),t(K,J),t(J,Za),e(a,da,n),e(a,$,n),t($,ga),e(a,ba,n),e(a,A,n),t(A,V),t(V,w),t(w,as)},p:ss,i:ss,o:ss,d(a){a&&s(m),a&&s(X),a&&s(Y),a&&s(Z),a&&s(E),a&&s(g),a&&s(O),a&&s(aa),a&&s(k),a&&s(sa),a&&s(S),a&&s(ta),a&&s(H),a&&s(na),a&&s(P),a&&s(ea),a&&s(f),a&&s(oa),a&&s(q),a&&s(pa),a&&s(d),a&&s(la),a&&s(v),a&&s(ra),a&&s(x),a&&s(ca),a&&s(h),a&&s(ia),a&&s(y),a&&s(ua),a&&s(T),a&&s(ka),a&&s(C),a&&s(ma),a&&s(W),a&&s(fa),a&&s(B),a&&s(ha),a&&s(K),a&&s(da),a&&s($),a&&s(ba),a&&s(A)}}}class Ms extends $s{constructor(m){super(),As(this,m,null,Ls,Is,{})}}export{Ms as default};
