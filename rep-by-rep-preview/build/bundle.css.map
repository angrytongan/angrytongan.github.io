{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "ChartHeader.svelte",
    "DragDropArea.svelte",
    "ECharts.svelte",
    "Graphs.svelte",
    "Videos.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import DragDropArea from './components/DragDropArea.svelte';\n    import Videos from './components/Videos.svelte';\n    import Graphs from './components/Graphs.svelte';\n    import { graphList } from './components/graphList.js';\n    import { performances } from './stores.js';\n\n    const newPerformance = (perfFile) => {\n        let err = '';\n\n        try {\n            performance = JSON.parse(perfFile.detail);\n\n            if (performance.athlete == undefined) {\n                err += 'Missing athlete.\\n';\n            }\n            if (performance.workout == undefined) {\n                err += 'Missing event name.\\n';\n            }\n            if (performance.youtubeurl == undefined) {\n                err += 'Missing YouTube URL.\\n';\n            }\n            performances.add(performance);\n\n        } catch (error) {\n            err += 'Unable to load .json file: ' + error + '\\n';\n        }\n\n        if (err) {\n            alert(err);\n        }\n    };\n\n    /*\n     * If we get a graph click on an item, tell everyone\n     * to reset their current time.\n     */\n    let ct = 0;                         // not to be confused with store currentTime\n    const setCurrentTime = (p) => {\n        ct = p.detail;\n    };\n\n    let showVideos = false;\n    let showWorkoutName = false;\n    let showDecals = false;\n    const removePerformance = (i) => {\n        performances.del(i);\n    };\n</script>\n\n<div id=\"layout\">\n    <header>\n        <p>\n            <strong>Rep-by-rep</strong><sup class=\"preview\">Preview</sup>\n            from <a target=\"_blank\" href=\"https://ergarcade.com\">The Erg Arcade!</a>\n        </p>\n    </header>\n\n    <nav>\n        <div id=\"drop-area\">\n            <DragDropArea\n                on:loadedFile={newPerformance}\n            ></DragDropArea>\n        </div>\n\n        {#if $performances.length}\n            <div>\n                <label for=\"show-videos\">\n                    <input\n                        type=\"checkbox\"\n                        bind:checked={showVideos}\n                        id=\"show-videos\"\n                    /> Show videos<br />\n                </label>\n                <label for=\"show-workout-name\">\n                    <input\n                        type=\"checkbox\"\n                        bind:checked={showWorkoutName}\n                        id=\"show-workout-name\"\n                    /> Show workout name<br />\n                </label>\n                <label for=\"use-decals\">\n                    <input\n                        type=\"checkbox\"\n                        bind:checked={showDecals}\n                        id=\"use-decals\"\n                    /> Use graph decals<br />\n                </label>\n            </div>\n            <hr />\n\n            <table>\n                {#each $performances as performance, i}\n                    <tr>\n                        <td rowspan=\"2\">\n                            <button\n                                on:click={() => removePerformance(i)}\n                                title=\"Remove {performance.athlete}\"\n                            >X</button>\n                        </td>\n                        <td>{performance.athlete}</td>\n                    </tr>\n                    <tr>\n                        <td style=\"font-size: smaller;\">{performance.workout}</td>\n                    </tr>\n                {/each}\n            </table>\n            <hr />\n\n            <ul>\n                {#each graphList as g}\n                    <li><a href=\"#{g.div}\">{g.name}</a></li>\n                {/each}\n            </ul>\n        {/if}\n\n    </nav>\n\n    <main>\n        <div id=\"sticky-area\">\n            {#if showVideos}\n                <Videos\n                    setCurrentTime={ct}\n                ></Videos>\n            {/if}\n        </div>\n\n        {#if $performances.length}\n            <div id=\"graph-area\">\n                <Graphs\n                    on:setCurrentTime={setCurrentTime}\n                    {showWorkoutName}\n                    {showDecals}\n                ></Graphs>\n            </div>\n        {/if}\n    </main>\n\n</div>\n\n<style>\n    :global(body) {\n        margin: 0;\n        box-sizing: border-box;\n\n        font-family: sans-serif;\n        font-size: 14px;\n    }\n    :global(a:hover) {\n        text-decoration: none;\n    }\n    #layout {\n        display: grid;\n        grid-template-columns: 200px 1fr;\n        grid-template-rows: 54px 1fr;\n        grid-gap: 0 1em;\n        height: 100vh;\n    }\n    header {\n        grid-column: 1 / 3;\n        background: rgb(30, 117, 157);\n        color: #fff;\n    }\n    header p {\n        margin: 0;\n        padding: 1em;\n    }\n    header a, header a:visited {\n        color: #fff;\n    }\n    header .preview {\n        background: #f00;\n        color: #fff;\n        border-radius: 5px;\n        padding: 0 0.5em;\n    }\n    nav {\n        grid-column: 1 / 2;\n        grid-row: 2 / 3;\n        overflow: auto;\n        background: #0ff;\n\n        padding: 1em;\n        margin-top: 0;\n        color: #fff;\n        background: rgb(30, 40, 44);\n    }\n    nav a, nav a:visited {\n        color: #fff;\n    }\n    nav ul {\n        padding-left: 1.2em;\n    }\n\n    main {\n        grid-column: 2 / 3;\n        overflow: auto;\n    }\n    #sticky-area {\n        position: -webkit-sticky;\n        position: sticky;\n        top: 0;\n        z-index: 1;\n        background: #fff;\n    }\n</style>\n",
    "<script>\n    let showHelp = false;\n    const toggleHelp = () => {\n        showHelp = !showHelp;\n    };\n</script>\n\n<h3>\n    <slot name=\"title\"></slot>\n    <button class=\"help-button\" on:click={() => toggleHelp()}>?</button>\n</h3>\n{#if showHelp}\n<slot name=\"help\"></slot>\n{/if}\n\n<style>\n    h3 {\n        color: rgb(30, 117, 157);\n        border-bottom: 1px solid rgb(30, 117, 157);\n        padding-bottom: 0.5em;\n    }\n    .help-button {\n        float: right;\n    }\n</style>\n",
    "<script>\n    import dragDrop from 'drag-drop';\n    import { onMount, createEventDispatcher } from 'svelte';\n\n    const dispatch = createEventDispatcher();\n\n    onMount(() => {\n        const removeDragDropArea = dragDrop('#dragDropArea', (files) => {\n            files.forEach((f) => {\n                const reader = new FileReader();\n                reader.addEventListener('load', (e) => {\n                    dispatch('loadedFile', reader.result);\n                });\n                reader.readAsText(f);\n            });\n        });\n\n        return () => {\n            removeDragDropArea();\n        };\n    });\n\n</script>\n\n<div id=\"dragDropArea\">\n    Drop file here\n</div>\n\n<style>\n    #dragDropArea {\n        height: 40px;\n        line-height: 40px;\n        text-align: center;\n        margin-bottom: 0.5em;\n\n        border: 1px solid #fff;\n        border-style: dashed;\n        border-radius: 5px;\n    }\n\n    /*\n     * svelte doesn't do class add / remove programatically:\n     * https://github.com/sveltejs/svelte/issues/1594#issuecomment-405269805\n     *\n     * Suggestion is to put this in global.\n     */\n    :global(.drag) {\n        color: rgb(30, 40, 44);\n        background-color: #fff;\n    }\n</style>\n",
    "<script>\n    import { onMount, onDestroy, createEventDispatcher } from 'svelte';\n    import * as echarts from 'echarts';\n\n    const dispatch = createEventDispatcher();\n\n    export let id;\n    export let height = 200;\n    export let options = {\n        title: {\n            text: 'Empty chart',\n        },\n    };\n\n    let chart;\n    let resizeTimer = null;\n    const resizeDebounceTime = 500; // ms\n\n    $: chart && chart.setOption(options, true);\n    $: height && onResize();\n\n    onMount(() => {\n        chart = echarts.init(document.getElementById(id));\n        chart.setOption(options, true);\n\n        window.addEventListener('resize', onResize);\n\n        chart.on('click', (p) => {\n            dispatch('chartClick', p);\n        });\n\n        chart.on('dataZoom', (p) => {\n            dispatch('chartDataZoom', p);\n        });\n\n        dispatch('chartResize', {\n            width: chart.getWidth(),\n            height: chart.getHeight(),\n        });\n    });\n\n    onDestroy(() => {\n        if (chart != undefined) {\n            chart.dispose(id);\n            window.removeEventListener('resize', onResize);\n        }\n    });\n\n    const onResize = () => {\n        if (chart != undefined && resizeTimer == null) {\n            resizeTimer = setTimeout(() => {\n                chart.resize();\n                dispatch('chartResize', {\n                    width: chart.getWidth(),\n                    height: chart.getHeight(),\n                });\n\n                resizeTimer = null\n            }, resizeDebounceTime);\n        }\n    };\n</script>\n\n<div\n    class=\"chart\"\n    style=\"height: {height}px\"\n    id={id}\n></div>\n\n<style>\n    .chart {\n        width: 100%;\n    }\n</style>\n",
    "<script>\n    import { createEventDispatcher } from 'svelte';\n    import { zoom } from '../stores.js';\n    import { graphList } from './graphList.js';\n\n    export let showWorkoutName;\n    export let showDecals;\n\n    let dispatch = createEventDispatcher();\n\n    const chartClick = (e) => {\n        console.log('chartClick', e);\n\n        // XXX This doesn't work for all graph types. For example, on a bar\n        // graph, we don't get any information about x / y values based on\n        // graph data (we do for div though).  Need to do some more\n        // investigating.\n        //\n        // XXX this may not be a problem; do we really care about getting\n        // events for every single graph? Think about this.\n        //\n        // XXX Ha, don't need to pass the event all the way back to here.  Each\n        // graph can take care of itself, then pass further back up if\n        // necessary.\n        //\n        //dispatch('setCurrentTime', p.detail[0]);\n    };\n\n    const chartDataZoom = (e) => {\n        zoom.set({\n            start: e.detail.batch[0].start,\n            end: e.detail.batch[0].end,\n        });\n    };\n</script>\n\n<div>\n    {#each graphList as gc}\n        <div class=\"graph\" id={gc.div}>\n            <svelte:component\n                this={gc.component}\n                {showWorkoutName}\n                {showDecals}\n                on:chartClick={chartClick}\n                on:chartDataZoom={chartDataZoom}\n            />\n        </div>\n    {/each}\n</div>\n\n<style>\n    .graph {\n        padding: 0 1em;\n        margin-top: 1em;\n        margin-bottom: 1em;\n    }\n</style>\n",
    "<script>\n    import { onDestroy } from 'svelte';\n    import { performances, offsets, currentTime } from '../stores.js';\n    import VideoYouTube from './VideoYouTube.svelte';\n    import luxon from 'luxon';\n\n    let maxDuration = 0;\n    let fastestFinish = Infinity;\n    let isPlaying = false;\n    let theTimer;\n\n    let lastSetCurrentTime = 0;\n    export let setCurrentTime = 0;\n    $: {\n        if (lastSetCurrentTime != setCurrentTime) {\n            jumpTo(setCurrentTime);\n            lastSetCurrentTime = setCurrentTime;\n        }\n    }\n\n    /*\n     * Prop to children.\n     */\n    const videoCmd = {\n        operation: 'none',\n        seconds: 0,\n    };\n\n    /*\n     * Controls.\n     */\n    const play = () => {\n        videoCmd.operation = 'play';\n        isPlaying = true;\n\n        theTimer = setInterval(() => {\n            currentTime.update((n) => n + 1);\n        }, 1000);\n    };\n\n    const pause = () => {\n        clearInterval(theTimer);\n        isPlaying = false;\n\n        videoCmd.operation = 'seekToAndPause';\n        videoCmd.seconds = $currentTime;\n    };\n\n    const sliderChanged = () => {\n        pause();\n    };\n\n    const jumpTo = (secs) => {\n        currentTime.set(secs);\n        pause();\n    };\n    const shuffle = (secs) => {\n        currentTime.update((n) => n + secs);\n        if ($currentTime < 0) {\n            $currentTime = 0;\n        }\n        pause();\n    };\n\n    /*\n     * Received from a VideoYouTube component when it has loaded video and is\n     * syncing to the go event timestamp.\n     */\n    const syncMessage = (p) => {\n        console.log('syncMessage', p.detail.player, p.detail.message);\n\n        if (p.detail.message == 'completed') {\n            pause();\n        }\n    };\n\n    /*\n     * Received from a VideoYouTube component.\n     */\n    const durationMessage = (p) => {\n        if (p.detail > maxDuration) {\n            maxDuration = Math.trunc(p.detail);\n        }\n        if (p.detail < fastestFinish) {\n            fastestFinish = Math.trunc(p.detail);\n        }\n    };\n\n    onDestroy(() => {\n        pause();\n    });\n\n</script>\n\n<div>\n    <h3>Videos</h3>\n    <div id=\"videos\">\n        {#each $performances as performance, i (performance.id)}\n            <div>\n                <p>\n                    {performance.athlete} - {performance.workout}\n                </p>\n                <VideoYouTube\n                    youTubeURL={$performances[i]['youtubeurl']}\n                    divId=\"player-{performance.id}\"\n                    width=\"320\"\n                    height=\"180\"\n                    seekOffset={$offsets.get(performance.athlete)}\n                    cmd={videoCmd}\n                    on:sync={syncMessage}\n                    on:duration={durationMessage}\n                ></VideoYouTube>\n            </div>\n        {/each}\n    </div>\n\n    <div id=\"controls\">\n        <button title=\"Start\" on:click={() => jumpTo(0)}>|&lt;</button>\n        <button title=\"Skip -0:10\" on:click={() => shuffle(-10)}>&lt;&lt;</button>\n        {#if isPlaying}\n            <button title=\"Pause\" on:click={pause}>||</button>\n        {:else}\n            <button title=\"Play\" on:click={play}>&gt;</button>\n        {/if}\n        <button title=\"Skip +0:10\" on:click={() => shuffle(10)}>&gt;&gt;</button>\n        <button title=\"End\" on:click={() => jumpTo(fastestFinish)}>&gt;|</button>\n\n        <input\n            type=\"range\"\n            min=\"0\"\n            max={maxDuration}\n            bind:value={$currentTime}\n            on:change={sliderChanged}\n        /> {luxon.Duration.fromObject({ seconds: $currentTime }).toFormat('mm:ss')}\n    </div>\n</div>\n\n<style>\n    #videos {\n        display: grid;\n        grid-template-columns: repeat(3, 1fr);\n        justify-items: center;\n    }\n    #videos p {\n        margin-top: 0;\n    }\n    h3 {\n        color: rgb(30, 117, 157);\n        border-bottom: 1px solid rgb(30, 117, 157);\n        padding-bottom: 0.5em;\n    }\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}